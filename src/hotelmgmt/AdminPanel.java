/* AdminPanel.java */
/* Admin Component for the Hotel Management System
 *
 * Copyright 2016 Ankit Pati <ankitpati@gmail.com>
 *
 * This  software is  free software;  you can redistribute it and/or  modify  it
 * under the terms of the  GNU Lesser General Public License as published by the
 * Free Software Foundation;  either  version 3  of the  License,  or  (at  your
 * option) any later version.
 *
 * This software is distributed in the hope that it will be useful, but  WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You  should  have received a copy of the GNU Lesser  General  Public  License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

package hotelmgmt;

import java.awt.*;
import java.sql.*;

public class AdminPanel extends javax.swing.JPanel {
    final static long serialVersionUID = 0l;
    String username;
    
    public AdminPanel(String username) {
        initComponents();

        this.username = username;
        activityLabel.setText(activityLabel.getText() + username);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        activityLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        managementTabbedPane = new javax.swing.JTabbedPane();
        hotelPane = new javax.swing.JPanel();
        hotelNameField = new javax.swing.JTextField();
        roomsField = new javax.swing.JTextField();
        userPane = new javax.swing.JPanel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        adminCheckbox = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        headerLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 36)); // NOI18N
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("Hotel Management System");

        activityLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 30)); // NOI18N
        activityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        activityLabel.setText("Admin: ");

        errorLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 24)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        hotelNameField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        hotelNameField.setForeground(java.awt.Color.gray);
        hotelNameField.setText("Hotel Name");
        hotelNameField.setToolTipText("Username");
        hotelNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hotelNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                hotelNameFieldFocusLost(evt);
            }
        });

        roomsField.setEditable(false);
        roomsField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        roomsField.setForeground(java.awt.Color.gray);
        roomsField.setText("Number of Rooms");
        roomsField.setToolTipText("Username");
        roomsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roomsFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomsFieldFocusLost(evt);
            }
        });
        roomsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                roomsFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout hotelPaneLayout = new javax.swing.GroupLayout(hotelPane);
        hotelPane.setLayout(hotelPaneLayout);
        hotelPaneLayout.setHorizontalGroup(
            hotelPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hotelPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hotelPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hotelNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addComponent(roomsField, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addContainerGap())
        );
        hotelPaneLayout.setVerticalGroup(
            hotelPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hotelPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hotelNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(roomsField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        managementTabbedPane.addTab("Hotels", hotelPane);

        usernameField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        usernameField.setForeground(java.awt.Color.gray);
        usernameField.setText("Username");
        usernameField.setToolTipText("Username");
        usernameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameFieldFocusLost(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        passwordField.setForeground(java.awt.Color.gray);
        passwordField.setText("Password");
        passwordField.setToolTipText("Password");
        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });

        adminCheckbox.setText("Administrator");

        javax.swing.GroupLayout userPaneLayout = new javax.swing.GroupLayout(userPane);
        userPane.setLayout(userPaneLayout);
        userPaneLayout.setHorizontalGroup(
            userPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(adminCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        userPaneLayout.setVerticalGroup(
            userPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        managementTabbedPane.addTab("Users", userPane);

        cancelButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        logoutButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        createButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(activityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(errorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(managementTabbedPane, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(activityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(managementTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        HMSFrame.self.renderLogin(username);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost
        if ("".equals(passwordField.getText()) || passwordField.getForeground() == Color.GRAY) {
            passwordField.setForeground(Color.GRAY);
            passwordField.setText("Password");
        }
    }//GEN-LAST:event_passwordFieldFocusLost

    private void passwordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusGained
        if (passwordField.getForeground() == Color.GRAY) {
            passwordField.setText("");
            passwordField.setForeground(Color.BLACK);
            passwordField.setCaretPosition(0);
        }
    }//GEN-LAST:event_passwordFieldFocusGained

    private void usernameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFieldFocusLost
        if ("".equals(usernameField.getText()) || usernameField.getForeground() == Color.GRAY) {
            usernameField.setForeground(Color.GRAY);
            usernameField.setText("Username");
        }
    }//GEN-LAST:event_usernameFieldFocusLost

    private void usernameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFieldFocusGained
        if (usernameField.getForeground() == Color.GRAY) {
            usernameField.setText("");
            usernameField.setForeground(Color.BLACK);
            usernameField.setCaretPosition(0);
        }
    }//GEN-LAST:event_usernameFieldFocusGained

    private void hotelNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hotelNameFieldFocusLost
        if ("".equals(hotelNameField.getText()) || hotelNameField.getForeground() == Color.GRAY) {
            hotelNameField.setForeground(Color.GRAY);
            hotelNameField.setText("Hotel Name");
        }
    }//GEN-LAST:event_hotelNameFieldFocusLost

    private void hotelNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hotelNameFieldFocusGained
        if (hotelNameField.getForeground() == Color.GRAY) {
            hotelNameField.setText("");
            hotelNameField.setForeground(Color.BLACK);
            hotelNameField.setCaretPosition(0);
        }
    }//GEN-LAST:event_hotelNameFieldFocusGained

    private void roomsFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roomsFieldFocusGained
        if (roomsField.getForeground() == Color.GRAY) {
            roomsField.setText("");
            roomsField.setForeground(Color.BLACK);
            roomsField.setCaretPosition(0);
        }
    }//GEN-LAST:event_roomsFieldFocusGained

    private void roomsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roomsFieldFocusLost
        if ("".equals(roomsField.getText()) || roomsField.getForeground() == Color.GRAY) {
            roomsField.setForeground(Color.GRAY);
            roomsField.setText("Number of Rooms");
        }
    }//GEN-LAST:event_roomsFieldFocusLost

    private void roomsFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomsFieldKeyTyped
        char c;
        String orig;      
        
        c = evt.getKeyChar();
        orig = roomsField.getText();
        
        if (Character.isDigit(c)) roomsField.setText(orig + c);
        else if (c == '\b' && orig.length() != 0) roomsField.setText(orig.substring(0, orig.length() - 1));
    }//GEN-LAST:event_roomsFieldKeyTyped

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        errorLabel.setText("");
        errorLabel.setForeground(Color.RED);
        hotelNameField.setText("Hotel Name");
        hotelNameField.setForeground(Color.GRAY);
        roomsField.setText("Number of Rooms");
        roomsField.setForeground(Color.GRAY);
        usernameField.setText("Username");
        usernameField.setForeground(Color.GRAY);
        passwordField.setText("Password");
        passwordField.setForeground(Color.GRAY);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        if (managementTabbedPane.getSelectedComponent() == userPane) createUser();
        else createHotel();
    }//GEN-LAST:event_createButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (managementTabbedPane.getSelectedComponent() == userPane) deleteUser();
        else deleteHotel();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void createUser() {
        boolean admin;
        String username, password;

        admin = adminCheckbox.isSelected();
        username = usernameField.getText();
        password = passwordField.getText();

        if (usernameField.getForeground() == Color.GRAY || "".equals(username)
                || passwordField.getForeground() == Color.GRAY || "".equals(password)) {
            errorLabel.setText("Provide Username and Password");
            errorLabel.setForeground(Color.RED);
            return;
        }

        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/hotelmgmt", "hotelmgmt", "hotelmgmt");
            PreparedStatement ps = con.prepareStatement("insert into users values(?, ?, ?) on duplicate key update password=?, admin=?")
        ) {
            ps.setString(1, username);
            ps.setString(2, password);
            ps.setInt(3, admin ? 1 : 0);
            ps.setString(4, password);
            ps.setInt(5, admin ? 1 : 0);
            ps.execute();
            errorLabel.setText("User Added");
            errorLabel.setForeground(Color.BLUE);
        }
        catch(SQLException e) {
            errorLabel.setText("Database Connection Failed");
            errorLabel.setForeground(Color.ORANGE);
        }
        finally {
            usernameField.setText("Username");
            usernameField.setForeground(Color.GRAY);
            adminCheckbox.setSelected(false);
            passwordField.setText("Password");
            passwordField.setForeground(Color.GRAY);
        }
    }
    
    private void deleteUser() {
        String username;
        
        username = usernameField.getText();

        if (usernameField.getForeground() == Color.GRAY || "".equals(username)) {
            errorLabel.setText("Provide Username");
            errorLabel.setForeground(Color.RED);
            return;
        }

        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/hotelmgmt", "hotelmgmt", "hotelmgmt");
            PreparedStatement ps = con.prepareStatement("delete from users where username=?")
        ) {
            ps.setString(1, username);
            ps.execute();
            errorLabel.setText("User Deleted");
            errorLabel.setForeground(Color.BLUE);
        }
        catch(SQLException e) {
            errorLabel.setText("Database Connection Failed");
            errorLabel.setForeground(Color.ORANGE);
        }
        finally {
            usernameField.setText("Username");
            usernameField.setForeground(Color.GRAY);
            adminCheckbox.setSelected(false);
            passwordField.setText("Password");
            passwordField.setForeground(Color.GRAY);
        }
    }
    
    private void createHotel() {
        int rooms;
        String hotel;

        hotel = hotelNameField.getText();

        if (hotelNameField.getForeground() == Color.GRAY || "".equals(hotel)
                || roomsField.getForeground() == Color.GRAY || "".equals(roomsField.getText())) {
            errorLabel.setText("Provide Hotel Name and Rooms");
            errorLabel.setForeground(Color.RED);
            return;
        }

        rooms = Integer.parseInt(roomsField.getText());

        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/hotelmgmt", "hotelmgmt", "hotelmgmt");
            PreparedStatement ps = con.prepareStatement("insert into hotels values(?, ?) on duplicate key update rooms=?")
        ) {
            ps.setString(1, hotel);
            ps.setInt(2, rooms);
            ps.setInt(3, rooms);
            ps.execute();
            errorLabel.setText("Hotel Added");
            errorLabel.setForeground(Color.BLUE);
        }
        catch(SQLException e) {
            errorLabel.setText("Database Connection Failed");
            errorLabel.setForeground(Color.ORANGE);
        }
        finally {
            usernameField.setText("Username");
            usernameField.setForeground(Color.GRAY);
            adminCheckbox.setSelected(false);
            passwordField.setText("Password");
            passwordField.setForeground(Color.GRAY);
        }
    }
    
    private void deleteHotel() {
        String hotel;

        hotel = hotelNameField.getText();

        if (hotelNameField.getForeground() == Color.GRAY || "".equals(hotel)) {
            errorLabel.setText("Provide Hotel Name");
            errorLabel.setForeground(Color.RED);
            return;
        }

        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/hotelmgmt", "hotelmgmt", "hotelmgmt");
            PreparedStatement ps = con.prepareStatement("delete from hotels where hotel=?")
        ) {
            ps.setString(1, hotel);
            ps.execute();
            errorLabel.setText("Hotel Deleted");
            errorLabel.setForeground(Color.BLUE);
        }
        catch(SQLException e) {
            errorLabel.setText("Database Connection Failed");
            errorLabel.setForeground(Color.ORANGE);
        }
        finally {
            usernameField.setText("Username");
            usernameField.setForeground(Color.GRAY);
            adminCheckbox.setSelected(false);
            passwordField.setText("Password");
            passwordField.setForeground(Color.GRAY);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activityLabel;
    private javax.swing.JCheckBox adminCheckbox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JTextField hotelNameField;
    private javax.swing.JPanel hotelPane;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTabbedPane managementTabbedPane;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField roomsField;
    private javax.swing.JPanel userPane;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
/* end of AdminPanel.java */
